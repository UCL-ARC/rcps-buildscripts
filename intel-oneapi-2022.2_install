#!/usr/bin/env bash

# Intel oneAPI. Both online installers, install base toolkit then hpc toolkit.
# Using silent installation.
# Also installs the MKL interfaces so don't need to run intel-compilers-interfaces_install. 

set -e

rm -Rf ~/intel

source includes/source_includes.sh

package_name="intel"
package_version="2022.2"
package_description="Intel's suite of compilers, performance libraries, frameworks, and analysis and debug tools. Contains the Intel oneAPI Base Toolkit 2022.2.0.262 and Intel oneAPI HPC Toolkit 2022.2.0.191. Intel compiler version is 2022.1.0 and corresponding Intel MPI version is 2021.6.0"
numeric_version="2022.1.0"
mpi_package_version="2021.6.0"
dpl_version="2021.7.0"
vtune_version="2022.2.0"

basekit=https://registrationcenter-download.intel.com/akdlm/irc_nas/18673/l_BaseKit_p_2022.2.0.262.sh
hpckit=https://registrationcenter-download.intel.com/akdlm/irc_nas/18679/l_HPCKit_p_2022.2.0.191.sh

# need a minimum of gcc-7.3.0 and some compilation options will require gcc >= 8.1
module purge
require beta-modules
require gcc-libs/10.2.0
require compilers/gnu/10.2.0
require binutils/2.36.1/gnu-10.2.0 

mkdir -p "${HOME}/temporary-intel-dirs"
unset COMPILER_TAG
make_build_env "$package_name" "${HOME}/temporary-intel-dirs"

# Package label is set by make_build_env but we need to override it
#  (to include the compilers top-level)
package_label="compilers/intel/$package_version"
mpi_package_label="mpi/intel/$mpi_package_version/intel"

cd "$build_dir"

wget "$basekit"
wget "$hpckit"

basescript=$(basename "${basekit}")
hpcscript=$(basename "${hpckit}")

sh ./$basescript -a --action=install --install-dir="$install_prefix" \
                    --download-cache="$build_dir" --silent --eula accept

sh ./$hpcscript -a --action=install --install-dir="$install_prefix" \
                   --download-cache="$build_dir" --silent --eula accept


# Compiler module
export cprefix=$install_prefix
make_module -p "$install_prefix" \
            -c compilers/"$package_name" \
            -o "$module_dir/compilers/$package_label" \
            -v CC=icc \
            -v CXX=icpc \
            -v CXXCPP="\"icpc -E\"" \
            -v F77=ifort \
            -v F90=ifort \
            -v FC=ifort \
            -v COMPILER_TAG=intel-2022 \
            -v BLAS_TAG=mkl \
            -v CMPLR_ROOT="$cprefix/compiler/$numeric_version" \
            -v TBBROOT="$cprefix/tbb/$mpi_package_version" \
            -v CLCK_ROOT="$cprefix/clck/$mpi_package_version" \
            -v INTELFPGAOCLSDKROOT="$cprefix/compiler/$numeric_version/lib/oclfpga" \
            -v INTEL_LICENSE_FILE="$cprefix/clck/$mpi_package_version/licensing:\$::env(HOME)/intel/licenses" \
            -v INTEL_PYTHONHOME="$cprefix/debugger/$mpi_package_version/dep" \
            -v DPL_ROOT="$cprefix/dpl/$dpl_version" \
            -v MKLROOT="$cprefix/mkl/$numeric_version" \
            -v DAL_MAJOR_BINARY=1 \
            -v DAL_MINOR_BINARY=1 \
            -v DALROOT="$cprefix/dal/$mpi_package_version" \
            -v DAALROOT="$cprefix/dal/$mpi_package_version" \
            -v DPCT_BUNDLE_ROOT="$cprefix/dpcpp-ct/$numeric_version" \
            -v INSPECTOR_2022_DIR="$cprefix/inspector/$numeric_version" \
            -v IPPROOT="$cprefix/ipp/$mpi_package_version" \
            -v IPP_TARGET_ARCH="intel64" \
            -v IPPCRYPTOROOT="$cprefix/ippcp/$mpi_package_version" \
            -v IPPCP_TARGET_ARCH="intel64" \
            -v VT_ROOT="$cprefix/itac/$mpi_package_version" \
            -v VT_MPI="impi4" \
            -v VT_ADD_LIBS="\"-ldwarf -lelf -lvtunwind -lnsl -lm -ldl -lpthread\"" \
            -v VTUNE_PROFILER_2022_DIR="$cprefix/vtune/$vtune_version" \
            -v VTUNE_PROFILER_DIR="$cprefix/vtune/$vtune_version" \
            -v ONEAPI_ROOT="$cprefix" \
            -e VT_LIB_DIR:"$cprefix/itac/$mpi_package_version/lib" \
            -e VT_SLIB_DIR:"$cprefix/itac/$mpi_package_version/slib" \
            -e PATH:"$cprefix/clck/$mpi_package_version/bin/intel64" \
            -e PATH:"$cprefix/compiler/$numeric_version/lib/oclfpga/bin" \
            -e PATH:"$cprefix/debugger/$mpi_package_version/gdb/intel64/bin" \
            -e PATH:"$cprefix/compiler/$numeric_version/linux/bin" \
            -e PATH:"$cprefix/compiler/$numeric_version/linux/bin/intel64" \
            -e PATH:"$cprefix/dev-utilities/$mpi_package_version/bin" \
            -e PATH:"$cprefix/dpcpp-ct/$numeric_version/bin" \
            -e PATH:"$cprefix/inspector/$numeric_version/bin64" \
            -e PATH:"$cprefix/itac/$mpi_package_version/bin" \
            -e PATH:"$cprefix/vpl/$numeric_version/bin" \
            -e PATH:"$cprefix/vtune/$vtune_version/bin64" \
            -e LIBRARY_PATH:"$cprefix/clck/$mpi_package_version/lib/intel64" \
            -e LIBRARY_PATH:"$cprefix/tbb/$mpi_package_version/lib/intel64/gcc4.8" \
            -e LIBRARY_PATH:"$cprefix/compiler/$numeric_version/linux/lib" \
            -e LIBRARY_PATH:"$cprefix/mkl/$numeric_version/lib/intel64" \
            -e LIBRARY_PATH:"$cprefix/dal/$mpi_package_version/lib/intel64" \
            -e LIBRARY_PATH:"$cprefix/ipp/$mpi_package_version/lib/intel64" \
            -e LIBRARY_PATH:"$cprefix/ippcp/$mpi_package_version/lib/intel64" \
            -e LIBRARY_PATH:"$cprefix/vpl/$numeric_version/lib" \
            -e LD_LIBRARY_PATH:"$cprefix/tbb/$mpi_package_version/lib/intel64/gcc4.8" \
            -e LD_LIBRARY_PATH:"$cprefix/compiler/$numeric_version/linux/compiler/lib/intel64_lin" \
            -e LD_LIBRARY_PATH:"$cprefix/compiler/$numeric_version/linux/lib/x64" \
            -e LD_LIBRARY_PATH:"$cprefix/compiler/$numeric_version/linux/lib" \
            -e LD_LIBRARY_PATH:"$cprefix/compiler/$numeric_version/lib/oclfpga/host/linux64/lib" \
            -e LD_LIBRARY_PATH:"$cprefix/debugger/$mpi_package_version/dep/lib" \
            -e LD_LIBRARY_PATH:"$cprefix/debugger/$mpi_package_version/libipt/intel64/lib" \
            -e LD_LIBRARY_PATH:"$cprefix/debugger/$mpi_package_version/gdb/intel64/lib" \
            -e LD_LIBRARY_PATH:"$cprefix/mkl/$numeric_version/lib/intel64" \
            -e LD_LIBRARY_PATH:"$cprefix/dal/$mpi_package_version/lib/intel64" \
            -e LD_LIBRARY_PATH:"$cprefix/ipp/$mpi_package_version/lib/intel64" \
            -e LD_LIBRARY_PATH:"$cprefix/ippcp/$mpi_package_version/lib/intel64" \
            -e LD_LIBRARY_PATH:"$cprefix/itac/$mpi_package_version/slib" \
            -e LD_LIBRARY_PATH:"$cprefix/vpl/$numeric_version/lib" \
            -e CPLUS_INCLUDE_PATH:"$cprefix/clck/$mpi_package_version/include" \
            -e CPATH:"$cprefix/tbb/$mpi_package_version/include" \
            -e CPATH:"$cprefix/dpl/$dpl_version/linux/include" \
            -e CPATH:"$cprefix/mkl/$numeric_version/include" \
            -e CPATH:"$cprefix/dal/$mpi_package_version/include" \
            -e CPATH:"$cprefix/dev-utilities/$mpi_package_version/include" \
            -e CPATH:"$cprefix/dpcpp-ct/$numeric_version/include" \
            -e CPATH:"$cprefix/ipp/$mpi_package_version/include" \
            -e CPATH:"$cprefix/ippcp/$mpi_package_version/include" \
            -e CPATH:"$cprefix/vpl/$numeric_version/include" \
            -e NLSPATH:"$cprefix/compiler/$numeric_version/linux/compiler/lib/intel64_lin/locale/%l_%t/%N" \
            -e NLSPATH:"$cprefix/mkl/$numeric_version/lib/intel64/locale/%l_%t/%N" \
            -e CLASSPATH:"$cprefix/dal/$mpi_package_version/lib/onedal.jar" \
            -e OCL_ICD_FILENAMES:"libalteracl.so" \
            -e OCL_ICD_FILENAMES:"libintelocl_emu.so" \
            -a OCL_ICD_FILENAMES:"$cprefix/compiler/$numeric_version/linux/lib/x64/libintelocl.so" \
            -e CMAKE_PREFIX_PATH:"$cprefix/tbb/$mpi_package_version" \
            -e CMAKE_PREFIX_PATH:"$cprefix/compiler/$numeric_version/linux/IntelDPCPP" \
            -e CMAKE_PREFIX_PATH:"$cprefix/dal/$mpi_package_version" \
            -e CMAKE_PREFIX_PATH:"$cprefix/vpl/$numeric_version" \
            -e MANPATH:"$cprefix/clck/$mpi_package_version/man" \
            -e MANPATH:"$cprefix/debugger/$mpi_package_version/documentation/man" \
            -a MANPATH:"$cprefix/compiler/$numeric_version/documentation/en/man/common" \
            -e MANPATH:"$cprefix/itac/$mpi_package_version/man" \
            -e GDB_INFO:"$cprefix/debugger/$mpi_package_version/documentation/info/" \
            -e INFOPATH:"$cprefix/debugger/$mpi_package_version/gdb/intel64/lib" \
            -e DIAGUTIL_PATH:"$cprefix/compiler/$numeric_version/sys_check/sys_check.sh" \
            -e PKG_CONFIG_PATH:"$cprefix/mkl/$numeric_version/lib/pkgconfig" \
            -e PKG_CONFIG_PATH:"$cprefix/dal/$mpi_package_version/lib/pkgconfig" \
            -e PKG_CONFIG_PATH:"$cprefix/vpl/$numeric_version/lib/pkgconfig" \
            -r gcc-libs/10.2.0 \
            -d \
            -w "[$package_name/$package_version] $package_description"


# MPI module
mprefix="$cprefix/mpi/$mpi_package_version"
make_module -d \
            -c mpi/"$package_name" \
            -o "${module_dir}/mpi/${mpi_package_label}" \
            -v GERUN_LAUNCHER=intel \
            -v MPI_HOME="$mprefix" \
            -v I_MPI_ROOT="$mprefix" \
            -v I_MPI_CC="icc" \
            -v I_MPI_CXX="icpc" \
            -v I_MPI_F90="ifort" \
            -v I_MPI_F77="ifort" \
            -v CCL_ROOT="$cprefix/ccl/$mpi_package_version" \
            -e CLASSPATH:"${mprefix}/lib/mpi.jar" \
            -e PATH:"${mprefix}/bin" \
            -e LD_LIBRARY_PATH:"${mprefix}/lib" \
            -e LIBRARY_PATH:"${mprefix}/lib" \
            -e CPATH:"${mprefix}/include" \
            -e MANPATH:"${mprefix}/man" \
            -e CMAKE_PREFIX_PATH:"$mprefix" \
            -v FI_PROVIDER_PATH="${mprefix}/libfabric/lib/prov:/usr/lib64/libfabric" \
            -e PATH:"${mprefix}/libfabric/bin" \
            -e LD_LIBRARY_PATH:"${mprefix}/libfabric/lib" \
            -e LIBRARY_PATH:"${mprefix}/libfabric/lib" \
            -w "[Intel MPI/${mpi_package_version}] This is Intel's MPI implementation, version ${mpi_package_version}, which is bundled with compiler package version ${package_version}."

cat >>"${module_dir}/mpi/${mpi_package_label}" <<'EOF'

# Check to see whether this is running in a scheduled environment (NHOSTS>1) and
# if not, set shared memory only.
if { [info exists ::env(NHOSTS) ] } {

        # Scheduled.
        # Check to see whether we have more than one host and if so set ofi and shared
        # memory, otherwise, set shared memory.
        if { $::env(NHOSTS) > 1} {

                # Multi-node, scheduled.
                setenv I_MPI_FABRICS shm:ofi
        } else {

                # Single node, scheduled.
                setenv I_MPI_FABRICS shm
        }
} else {

        # Not scheduled.
        setenv I_MPI_FABRICS shm
}

EOF

echo "Module files put in: $module_dir" >&2
chmod a+rx "$module_dir"

cd "$owd"
if [ -n "$build_dir" ]; then
    rm -Rf "$build_dir"
fi

