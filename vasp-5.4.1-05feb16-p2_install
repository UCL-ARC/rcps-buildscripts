#!/usr/bin/env bash

###############################################
# Installing VASP
#  using Intel compilers, MKL, FFTW->MKL wrapper, and Intel MPI.
# 
#  if you don't add the patch, remember to switch back to OpenMPI for VASP 5.4.1. *twitch* *twitch*
#
# by Ian Kirker, 2015 
#

set -e

PACKAGE_NAME="vasp"

for i in ${includes_dir:=$(dirname $0 2>/dev/null)/includes}/{module_maker,require}_inc.sh; do . $i; done

_env_setup() {
  BASE_VASP_VERSION=${VASP_VERSION:-${VERSION:-5.4.1-05feb16}}
  VASP_VERSION=$BASE_VASP_VERSION
  VASP_PACK_URL=https://www.vasp.at/index.php/download1/category/5-src?download=27:vasp-5-4-1-05feb16
  VASP_PACK_FILE=vasp-${BASE_VASP_VERSION}.tgz
  VASP_UNPACK_DIR=vasp.${BASE_VASP_VERSION%-*}

  # Only patch versions we know about.
  # You know what would be great though? If they actually incremented version numbers.
  if [ "${BASE_VASP_VERSION%-*}" == "5.4.1" ]; then
    VASP_PATCH_URLS=( 'https://www.vasp.at/index.php/download1/category/5-src?download=28:patch-5-4-1-14032016'
                      'https://www.vasp.at/index.php/download1/category/5-src?download=29:patch-5-4-1-03082016' )
    VASP_VERSION=${VASP_VERSION}-p${#VASP_PATCH_URLS[@]}
    for file in "${VASP_PATCH_URLS[@]}"; do
      VASP_RUBY_PATCH_STRING="\"$file\", $VASP_RUBY_PATCH_STRING "
    done
    VASP_RUBY_PATCH_STRING="[ $VASP_RUBY_PATCH_STRING]"
    echo "Patchlist: $VASP_RUBY_PATCH_STRING"
  else
    unset VASP_PATCH_URLS
  fi

  POTENTIAL_URLS="https://www.vasp.at/index.php/download1/category/3-lda?download=1:lda-paw-datasets-old"
  POTENTIAL_URLS="$POTENTIAL_URLS https://www.vasp.at/index.php/download1/category/3-lda?download=16:uspp-lda-potentials"
  POTENTIAL_URLS="$POTENTIAL_URLS https://www.vasp.at/index.php/download1/category/3-lda?download=2:lda-paw-datasets-version-52"
  POTENTIAL_URLS="$POTENTIAL_URLS https://www.vasp.at/index.php/download1/category/4-pbe?download=3:pbe-paw-datasets-old"
  POTENTIAL_URLS="$POTENTIAL_URLS https://www.vasp.at/index.php/download1/category/4-pbe?download=4:pbe-paw-datasets-version-52"
  POTENTIAL_URLS="$POTENTIAL_URLS https://www.vasp.at/index.php/download1/category/10-pw91?download=17:pw91-uspp-potentials"
  POTENTIAL_URLS="$POTENTIAL_URLS https://www.vasp.at/index.php/download1/category/10-pw91?download=18:pw91-paw-datasets"

  VASP_ACCESS_GROUP=legvasp


  require  compilers/intel/2015/update2          
  require  mpi/intel/2015/update3/intel          
  require  ruby  # For the automatic download because the VASP site is a PoS

  INSTALL_PREFIX=${INSTALL_PREFIX:-/shared/ucl/apps/${PACKAGE_NAME}/$VASP_VERSION/${COMPILER_TAG}}
  echo "Installing into: $INSTALL_PREFIX"
  export LD_LIBRARY_PATH=$INSTALL_PREFIX/lib:$LD_LIBRARY_PATH
  export PATH=$INSTALL_PREFIX/bin:$PATH

  if [ -z "$VASP_USERNAME" -o -z "$VASP_PASSWORD" ]; then
    echo "Error in $0: You must provide VASP web account credentials to download the VASP source: set the VASP_USERNAME and VASP_PASSWORD variables." >&2
    exit 2
  fi

}


_file_setup() {
  temp_dir=`mktemp -d -t ${VASP_VERSION}.XXXXXXXXXX`
  cd $temp_dir
  echo "Working in: $temp_dir"

  cat >>Gemfile <<EOF
source 'https://rubygems.org'
gem 'mechanize'
EOF

  bundle config build.nokogiri --use-system-libraries 
  bundle install --path=./vendor/bundle

  mkdir potentials

  cat >download_src.rb <<EOF
#!/usr/bin/env ruby
require 'rubygems'
require 'bundler/setup'
require 'mechanize'

a = Mechanize.new
a.verify_mode = OpenSSL::SSL::VERIFY_NONE
a.pluggable_parser.default = Mechanize::Download

a.get('http://www.vasp.at/') do |page|
  logged_in_page = page.form_with(:action => 'https://www.vasp.at/index.php/component/comprofiler/login') do |f|
    f.username = "$VASP_USERNAME"
    f.passwd = "$VASP_PASSWORD"
  end.submit
  a.get('${VASP_PACK_URL}').save("${VASP_PACK_FILE}")
  patches = $VASP_RUBY_PATCH_STRING
  patches.each { |patch| a.get(patch).save("#{patch.split(/:/).last}.gz") }
  "$POTENTIAL_URLS".split(" ").each do |url|
    a.get(url).save("potentials/" + url.split(":").last + ".tgz")
  end
end
EOF

  gem env

  chmod +x download_src.rb 
  bundle exec ./download_src.rb

  # no verification :(

  tar -xf $VASP_PACK_FILE
  
  for patch_url in "${VASP_PATCH_URLS[@]}"; do
    gunzip ${patch_url##*:}.gz
  done
}

_build() {
  cd $VASP_UNPACK_DIR
  make
  cd ..
}

_pre_build() {
  for patch_url in "${VASP_PATCH_URLS[@]}"; do
    cd $VASP_UNPACK_DIR
    echo "---> Patching with: ${patch_url##*:}"
    patch -p0 <../${patch_url##*:}
    cd ..
  done 

  cd $VASP_UNPACK_DIR
  cp arch/makefile.include.linux_intel ./makefile.include
  cd ..
}

_post_build() {
  mkdir -p $INSTALL_PREFIX
  chgrp -R "$VASP_ACCESS_GROUP" $INSTALL_PREFIX
  mkdir -p $INSTALL_PREFIX/bin
  'cp' -v $VASP_UNPACK_DIR/bin/vasp* $INSTALL_PREFIX/bin
  mkdir -p $INSTALL_PREFIX/potentials
  'cp' -v potentials/* $INSTALL_PREFIX/potentials/
}

_report() {
  cat <<EOF
######################################
Built $PACKAGE_NAME:
  Versions:
    $VASP_VERSION with $COMPILER_TAG
  Prefix:
    $INSTALL_PREFIX

EOF
}

_clean_up() {
  rm -Rf ${temp_dir:-ERROR_TEMP_DIR_NOT_SET}
}

_env_setup
_file_setup
_pre_build
_build
_post_build
_report
_clean_up

