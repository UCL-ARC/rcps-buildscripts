#!/usr/bin/env bash

###############################################
# Installing VASP 
#  using Intel compilers, MKL, FFTW->MKL wrapper, and Intel MPI.
#  and libbeef for BEEF-vdW functionals
#  and vtst
#  effectively merges these existing scripts:
#  * vasp-5.4.4-libbeef_install
#  * vasp-5.4.4-vtst3.2-r178_install

set -e

package_name="vasp"
package_version="5.4.4-18apr2017"
package_variant="libbeef-vtst198"

for i in ${includes_dir:-$(dirname $0 2>/dev/null)/includes}/{module_maker,require,tools}_inc.sh; do . $i; done

_env_setup() {
    module purge
    require  gcc-libs
    require  compilers/intel/2017/update1
    require  mpi/intel/2017/update1/intel
    require  libbeef/0.1.3/intel-2018

    make_build_env

    package_store="${PKG_STORE:-/shared/ucl/apps/pkg-store}"
    package_file="vasp-${package_version}.tgz"
    unpack_dir="vasp.${package_version%-*}"

    vasp_access_group=legvasp5
}


_file_setup() {
  cd "$build_dir"

  cp "$package_store/$package_file" "./$package_file"

  tar -xf $package_file

  wget http://theory.cm.utexas.edu/code/vtstcode-198.tgz
  wget http://theory.cm.utexas.edu/code/vtstscripts.tgz

  sha256sum -c <<<"17caedfae0d92a90ace2595888b9685a391202df825df0ea1d74ba5ebe212d02  vtstcode-198.tgz
9422e548b0408a41695b0e70eec042d7663fbf9e4b7e3980c86bb2fc6cd5fafc  vtstscripts.tgz"

  tar -xf vtstcode-198.tgz
  tar -xf vtstscripts.tgz
}

_pre_build() {
  cd "$unpack_dir"
  cp arch/makefile.include.linux_intel ./makefile.include
  # patch to use libbeef
  patch_dir="$owd/patches"
  patch -p0 -i "$patch_dir/VASP-5.4.4_makefile.include_libbeef.patch"
  cd ..

  cd vtstcode-*
  cp ./vtstcode5/* "../$unpack_dir/src"
  cd ..

  # Modify main.F and .objects as stated at http://theory.cm.utexas.edu/vtsttools/installation.html
  cd "$unpack_dir/src"
  cat >tmp.patch <<EOF
--- main.F.orig 2019-07-16 10:27:55.539475649 +0100
+++ main.F      2019-07-16 10:28:39.697810676 +0100
@@ -3144,7 +3144,7 @@
       ENDIF

       CALL CHAIN_FORCE(T_INFO%NIONS,DYN%POSION,TOTEN,TIFOR, &
-           LATT_CUR%A,LATT_CUR%B,IO%IU6)
+           TSIF,LATT_CUR%A,LATT_CUR%B,IO%IU6)

       CALL PARALLEL_TEMPERING(NSTEP,T_INFO%NIONS,DYN%POSION,DYN%VEL,TOTEN,TIFOR,DYN%TEBEG,DYN%TEEND, &
            LATT_CUR%A,LATT_CUR%B,IO%IU6)
EOF
  patch -i tmp.patch

  cat >tmp.patch <<'EOF'
--- .objects.orig       2019-07-16 10:41:37.399709954 +0100
+++ .objects    2019-07-16 10:41:45.623772328 +0100
@@ -69,6 +69,19 @@
 	tet.o \
 	tetweight.o \
 	hamil_rot.o \
+	bfgs.o \
+	dynmat.o \
+	instanton.o \
+	lbfgs.o\
+	sd.o \
+	cg.o \
+	dimer.o \
+	bbm.o \
+	fire.o \
+	lanczos.o \
+	neb.o \
+	qm.o \
+	opt.o \
 	chain.o \
 	dyna.o \
 	k-proj.o \
EOF

  patch -i tmp.patch

  # There exists a vasp-5.4.4-mpmd.patch but a compilation question was answered "you do not need to apply the mpmd patch or run the mkbdrpro.pl script for a standard installation of the vtstcode."
  # It doesn't say anywhere in what circumstances you do want that patch.

  cd ../../
  echo "Ending pre-build in: $(pwd)"

}

_build() {
  cd "$unpack_dir"
  make
  cd ..
}

_post_build() {
  mkdir -p "$install_prefix"
  chgrp -R "$vasp_access_group" "$install_prefix"
  mkdir -p "$install_prefix/bin"
  'cp' -v "$unpack_dir"/bin/vasp* "$install_prefix/bin"

  'mv' vtstscripts-* vtstscripts
  'cp' -rv vtstscripts "$install_prefix"
}

_clean_up() {
  #rm -Rf ${temp_dir:-ERROR_TEMP_DIR_NOT_SET}
  :
}

_env_setup
_file_setup
_pre_build
_build
_post_build
_clean_up
