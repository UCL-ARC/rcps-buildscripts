#!/usr/bin/env bash

###############################################
# Installing OpenFOAM
# 
# (Note: uses -xHost somewhere in its build system - build on oldest node)

set -o errexit \
    -o pipefail
    #-o nounset \

includes_dir=${INCLUDES_DIR:-$(dirname "$0" 2>/dev/null)/includes}

# shellcheck disable=SC1090
# ^ disables linter warning for non-constant source
source "${includes_dir}/require_inc.sh"


##############################################
# Installation info
##############################################

VERSION=${VERSION:-3.0.1}
INSTALL_PREFIX=${INSTALL_PREFIX:-/shared/ucl/apps/OpenFOAM}

##############################################
# Download files, check hashes
##############################################

MD5=${MD5:-304e6a14b9e69c20989527f5fb1ed724}
SRC_ARCHIVE=${SRC_ARCHIVE:-http://downloads.sourceforge.net/foam/OpenFOAM-${VERSION}.tgz}

THIRDPARTY_VERSION=${THIRDPARTY_VERSION:-3.0.1}
THIRDPARTY_ARCHIVE=${THIRDPARTY_ARCHIVE:-http://downloads.sourceforge.net/foam/ThirdParty-${THIRDPARTY_VERSION}.tgz}
THIRDPARTY_MD5=${THIRDPARTY_MD5:-4665072d7d29ab9af5ced402f667185a}

QT_VERSION=${QT_VERSION:-4.8.6}
QT_ARCHIVE=${QT_ARCHIVE:-http://download.qt-project.org/official_releases/qt/4.8/${QT_VERSION}/qt-everywhere-opensource-src-${QT_VERSION}.tar.gz}
QT_MD5=${QT_MD5:-2edbe4d6c2eff33ef91732602f3518eb}

BUILD_ROOT=/tmp/openfoam-build

mkdir -p "$BUILD_ROOT"
temp_dir=$(mktemp -d -p "$BUILD_ROOT")

ln -fsT "$temp_dir" "$INSTALL_PREFIX"
cd "$INSTALL_PREFIX"

wget --no-verbose "$SRC_ARCHIVE"
wget --no-verbose "$THIRDPARTY_ARCHIVE"
wget --no-verbose "$QT_ARCHIVE"

echo "Checking hashes:"
md5sum -c <<EOF
$MD5  OpenFOAM-${VERSION}.tgz
$THIRDPARTY_MD5  ThirdParty-${THIRDPARTY_VERSION}.tgz
$QT_MD5  qt-everywhere-opensource-src-${QT_VERSION}.tar.gz
EOF


#######################
# Setup Environment
#######################

module purge || : 
# if you have a module containing an alias loaded but the alias
#  hasn't made it through into the script scope, purging will return
#  non-zero, but isn't important. || : stops this halting the script
require gcc-libs/4.9.2
require apr
require subversion
require compilers/intel/2015/update2
require mpi/intel/2015/update3/intel
require gsl/1.16/intel-2015-update2
require cmake
require git # Used in waves2Foam to get libOceanWave3D source
require flex

export MPI_ROOT=${MPI_ROOT:-$I_MPI_ROOT}


export VERSION
export QT_VERSION
export THIRDPARTY_VERSION
export INSTALL_PREFIX

# Owain claims these keep getting reset *somehow*
#  I can't see a way this could happen, though, so I'm trying it without
#   resetting them after each build step
function reset_build_vars() {
    # OpenFOAM config
    #   shellcheck disable=SC1090
    source "${INSTALL_PREFIX}/OpenFOAM-${VERSION}/etc/bashrc"

    # QT variables
    export QTDIR=${INSTALL_PREFIX}/ThirdParty-${THIRDPARTY_VERSION}/platforms/linux64Icc/qt-${QT_VERSION}
    export QTINC=${INSTALL_PREFIX}/ThirdParty-${THIRDPARTY_VERSION}/platforms/linux64Icc/qt-${QT_VERSION}/include
    export QTLIB=${INSTALL_PREFIX}/ThirdParty-${THIRDPARTY_VERSION}/platforms/linux64Icc/qt-${QT_VERSION}/lib
    export QT_DIR=${INSTALL_PREFIX}/ThirdParty-${THIRDPARTY_VERSION}/platforms/linux64Icc/qt-${QT_VERSION}

    # Fix PATH
    export PATH=${INSTALL_PREFIX}/ThirdParty-${THIRDPARTY_VERSION}/platforms/linux64Icc/qt-${QT_VERSION}/bin:$PATH

    # Fix LD_LIBRARY_PATH - otherwise libstdc++ breaks
    export LD_LIBRARY_PATH=/shared/ucl/apps/gcc/4.9.2/lib64:${LD_LIBRARY_PATH}

    # Fix CC/CXX 
    export WM_CXX=$CXX
    export WM_CC=$CC
    export FOAM_SIGFPE=1

    # Parallel build
    export WM_NCOMPPROCS=10
}

#################################
# Unpack and modify files
#################################

tar -xzf "OpenFOAM-${VERSION}.tgz"
tar -xzf "ThirdParty-${THIRDPARTY_VERSION}.tgz"

# Patch the Allwmake scripts so that they exit on an error rather than blindly continuing.
find . -name "Allwmake" -print0 | xargs -0 -Ifile sed -i -e "1s_\#\!/bin/sh_\#\!/bin/sh\nset -e\n_" file

# Patch the included bashrc env to:
#  * use the supplied installation directory
#  * use Intel's compiler and MPI
cd "OpenFOAM-${VERSION}/etc"
patch --ignore-whitespace <<'EOF'
--- bashrc  2014-12-04 17:52:43.000000000 +0000
+++ bashrc.new  2015-05-01 14:13:10.788290155 +0100
@@ -42,7 +42,7 @@
 #
 # Location of the OpenFOAM installation
 # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-foamInstall=$HOME/$WM_PROJECT
+foamInstall=$INSTALL_PREFIX
 # foamInstall=~$WM_PROJECT
 # foamInstall=/opt/$WM_PROJECT
 # foamInstall=/usr/local/$WM_PROJECT
@@ -63,7 +63,7 @@

 #- Compiler:
 #    WM_COMPILER = Gcc | Gcc45 | Gcc46 | Gcc47 | Gcc48 | Gcc49| Clang | Icc
-export WM_COMPILER=Gcc
+export WM_COMPILER=Icc
 unset WM_COMPILER_ARCH WM_COMPILER_LIB_ARCH

 #- Architecture:
@@ -81,7 +81,7 @@
 #- MPI implementation:
 #    WM_MPLIB = SYSTEMOPENMPI | OPENMPI | SYSTEMMPI | MPICH | MPICH-GM | HPMPI  
 #               | MPI | QSMPI | SGIMPI 
-export WM_MPLIB=SYSTEMOPENMPI
+export WM_MPLIB=INTELMPI

 #- Operating System:
 #    WM_OSTYPE = POSIX | ???
EOF

cd config
cp /shared/ucl/apps/build_scripts/openfoam-patches/CGAL.patch .
patch < CGAL.patch

reset_build_vars

cd "$INSTALL_PREFIX"

cd "OpenFOAM-${VERSION}/src/OpenFOAM/include"
ln -s /shared/ucl/apps/flex/2.5.39/gnu-4.9.2/include/FlexLexer.h .

cd "$INSTALL_PREFIX"
cd "ThirdParty-${THIRDPARTY_VERSION}"



#################################
# Build Qt
#################################

cp /shared/ucl/apps/build_scripts/openfoam-patches/makeQt.patch .
patch < makeQt.patch

rm -rf openmpi-* cmake-*

tar -xzf "../qt-everywhere-opensource-src-${QT_VERSION}.tar.gz" 

# Compiling QT with Intel compilers breaks in all kinds of fun ways.
./makeQt -gcc 2>&1 | tee makeqt.log



#################################
# Build CGAL
#################################

cp /shared/ucl/apps/build_scripts/openfoam-patches/makeCGAL.patch .
patch < makeCGAL.patch
./makeCGAL 2>&1 | tee makecgal.log



#################################
# Build OpenFOAM
#################################

cd "../OpenFOAM-${VERSION}"
env >pre-build-env
./Allwmake 2>&1 | tee make.log



#################################
# Build Paraview (against OpenFOAM)
#################################

cd "../ThirdParty-${THIRDPARTY_VERSION}"
env >pre-build-env
./makeParaView4

export ParaView_DIR=${INSTALL_PREFIX}/ThirdParty-${THIRDPARTY_VERSION}/platforms/linux64Icc/paraview-4.1.0
export PATH=$ParaView_DIR/bin:$PATH
export PV_PLUGIN_PATH=$FOAM_LIBBIN/paraview-4.1.0
cd "$FOAM_UTILITIES/postProcessing/graphics/PV4Readers"

./Allwclean
./Allwmake 2>&1 | tee make1.log
./Allwmake 2>&1 | tee make2.log



#################################
# Build waves2Foam
#################################


export LIBRARY_PATH=$INSTALL_PREFIX/OpenFOAM-3.0.1/lib:$LIBRARY_PATH
export LD_LIBRARY_PATH=$INSTALL_PREFIX/OpenFOAM-3.0.1/lib:$LD_LIBRARY_PATH


cd "$INSTALL_PREFIX/OpenFOAM-${VERSION}/applications/utilities"

svn co http://svn.code.sf.net/p/openfoam-extend/svn/trunk/Breeder_1.6/other/waves2Foam

cd waves2Foam

# Trying to track down a problem -- maximum bash debugging
find . -name "Allwmake" -print0 | xargs -0 -Ifile sed -i -e "1s_\#\!/bin/bash_\#\!/bin/sh\nset -e\n_" file

patch --ignore-whitespace bin/bashrc.org <<EOF
16,21c16,21
< export WAVES_DIR=\$WM_PROJECT_USER_DIR/applications/utilities/waves2Foam
< export WAVES_APPBIN=\$FOAM_USER_APPBIN
< export WAVES_LIBBIN=\$FOAM_USER_LIBBIN
< 
< export WAVES_GSL_INCLUDE=/usr/include
< export WAVES_GSL_LIB=/usr/lib64
---
> export WAVES_DIR=\$INSTALL_PREFIX/OpenFOAM-${VERSION}/applications/utilities/waves2Foam
> export WAVES_APPBIN=\$FOAM_APPBIN
> export WAVES_LIBBIN=\$FOAM_LIBBIN
> 
> export WAVES_GSL_INCLUDE=$(pkg-config --variable includedir gsl)
> export WAVES_GSL_LIB=$(pkg-config --variable libdir gsl)
EOF

./Allwmake


#################################
# Clean-up
#################################

rm "$INSTALL_PREFIX"
cd "$temp_dir"

# Fix permissions on ThirdParty directory so that our users can actually run stuff.
chmod -R o+rX "ThirdParty-${THIRDPARTY_VERSION}"
mkdir "$INSTALL_PREFIX"
cp -R "OpenFOAM-${VERSION}" "$INSTALL_PREFIX/OpenFOAM-${VERSION}" 
cp -R "ThirdParty-${THIRDPARTY_VERSION}" "$INSTALL_PREFIX/ThirdParty-${THIRDPARTY_VERSION}"

